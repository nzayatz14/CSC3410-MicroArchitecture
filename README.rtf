{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12820\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Michele Burns, Michael Newton, Nick Zayatz, Charlie Adams\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc
\cf0 MicroArchitecture Project\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
What we have uploaded that you will need to run your program:\
	- the .circ file, which contains the machine itself\
	- the gmac.gm file, contains our micro-code\
	- the gcd.gm file contains the macro-code for running gcd.\
	- we have also given you a sample image for our RAM, this would be beneficial,\
             it is sometimes simply easier to edit, the image.\
\
To set up our program to be able to run it, you can do the following:\
	1. Reset the simulation, making sure to select how long you would like the clock ticks to be\
	2. Then you will load the two images into ROM.  created from the gmac file.\
	3. The next step is to get RAM setup, to do this you will, will need to compile the gcd.gm file, \
	    Then make sure that this is in the correct format, which in our case is placing it sections of 8.\
	4. Then you will need to call the bootstrap and put in our beginning values for sp, cpp, lv, and pc\
	    so for example these it could look something like: \
			750000 200 400 100 14\
	    then followed by the output from step 3, followed by 237 *0, and then the two values in which you  would like to                 \
               find the gcd of.\
	5. Once it is all loaded you are ready to run the program. \
\
\
}