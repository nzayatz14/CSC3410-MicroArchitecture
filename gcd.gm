macrocode bank[7:0] RAM;
     
operands byte{#1={+1=#1[7:0];};};
operands varnum{#1 = {+1=#1[7:0]; }; };
operands varnumconst{#1,#2 = {+1=#1[7:0]; +2=#2[7:0]; }; };
operands noop{- = {};};
operands offset{#1 = {+1=#1@[15:8];+2=#1@[7:0]; }; };
operands disp{#1 = {+1=#1[15:8];+2=#1[7:0]; }; };
operands index{#1 = {+1=#1[15:8];+2=#1[7:0]; }; };

op bipush{+0[7:0]=0x10; operands byte;};
op dup{+0[7:0]=0x59; operands noop;};
op goto{+0[7:0]=0xA7; operands offset;};
op iand{+0[7:0]=0x7E; operands noop;};
op iadd{+0[7:0]=0x60; operands noop;};
op ifeq{+0[7:0]=0x99; operands offset;};
op iflt{+0[7:0]=0x9B; operands offset;};
op if_icmpeq{+0[7:0]=0x9F; operands offset;};
op iinc{+0[7:0]=0x84; operands varnumconst;};
op iload{+0[7:0]=0x15; operands varnum;};
op invokevirtual{+0[7:0]=0xB6; operands disp;};
op ior{+0[7:0]=0xB0; operands noop;};
op ireturn{+0[7:0]=0xAC; operands noop;};
op istore{+0[7:0]=0x36; operands varnum;};
op isub{+0[7:0]=0x64; operands noop;};
op ldc_w{+0[7:0]=0x36; operands index;};
op nop{+0[7:0]=0x00; operands noop;};
op pop{+0[7:0]=0x57; operands noop;};
op swap{+0[7:0]=0x5F; operands noop;};
op wide{+0[7:0]=0xC4; operands noop;};
op halt{+0[7:0]=0x0a; operands noop;};

begin macrocode @0x100
a: .symbol  0x01  //specify the offset into the local store
b: .symbol  0x02
c: .symbol  0x03
start:
      iload a
      bipush 0 
      if_icmpeq exit1
loopbegin:
      iload b
      bipush 0
      if_icmpeq exit2
      iload b
      iload a
      isub
      iflt first
      iload b
      iload a
      isub
      istore b
      goto loopbegin
first:
      iload a
      iload b
      isub
      istore a
      goto loopbegin
exit1:
      iload b
      istore c
      goto exit3
exit2:
      iload a 
      istore c
      goto exit3
exit3:
      halt
      end
